========== IDEEN ========== 

* Fotos der Wohnung übernehmen und darstellen
* Ical-Kalender der Besichtigungstermine
* Wohnungen miteinander vergleichen (Darstellung der Daten nebeneinander, und auf Karte)
* EUR/m2 grafisch darstellen, relativ zu den anderen eingegebenen Wohnungen
* Zeigt Umgebung der Wohnung an
  - Essen und Ausgehen: Restaurants, Cafes, Bars aus Qype
  - Einkaufen: Supermärkte, Geschäfte
  - Verkehrsanbindung: S-, U-, Bus, Trambahn
  - Points of Interest (Parks, bekannte Plätze)
  - "Intelligent gezoomt" (Umkreis 300m, es sei denn, etwas wichtiges (U,S) läge dann außerhalb)

* Such-Agenten von WG-Gesucht automatisch importieren und Daten aktualisieren

* Startseite: Todo-Liste
  - visit seit letztem mal abgelaufen: "wie war der besuch?"
  - vor besuch: telefonnummer eintragen

* Flat-Seite: Email-Korrespondenz mit Vermieter integriert
  - wie facebook
  - keine eigene Email-Adresse nötig

* Flat-Seite: Timeline auf der Wohnungsseite statt einem großen Kommentar
  => "Was ist hier der Stand?"
  - "Mini-CRM" (telefoniert, ...)
  - hinzugefügt 
  - bearbeitet
  - status
  - notizen anlegen
  - termin vereinbart
  - mehrere kommentare

* Verkehrsanbindung der Flats darstellen
  * Fahrzeit zu "Favoriten"
    - mit km-anzeige und geschätzter Fahrzeit (öffentlich, auto, rad, zu fuß)
  * Gehzeit zu nächster Tram, Bus, U- oder S-Bahn anzeigen
  * Fahrzeit zur nächsten Autobahn-Auffahrt
  * Entfernung zu "Points of Interest" in der Gegend automatisch berechnen
    ("Marienplatz", "Englischer Garten", "Isar", "Westpark", "Olympiapark")
  * Kneipendichte (gut bewertete aus qype holen)
  * bei rollover route auf der Karte einblenden  
* viertel-grenzen einblenden
* eigene fixpunkte eingeben (z.b. arbeit, hauptbahnhof)

========== LATER ========== 

* stadtviertel auf der karte einrahmen
* i18n auf deutsch
* offline-verwendbarkeit
* flats anhand der umkreise bewerten (Kevin)
* Vermieter/Mitbewohner anhand des namens/email im web googlen (Kevin)
* immoscout scraper fixen
* mehrstädte-fähigkeit
  - zoom halbwegs sinnvoll auf die stadt, in der gesucht wird
  - letzte lat/long und zoomstufe speichern

Aktionen mit einer Wohnung:
- Karte und Infos ansehen/ergänzen
  - formular zeigen
- Termin vereinbaren
  - kontaktdaten anzeigen
  - termin abfragen und speichern
- Vermieter kontaktieren
  - kontaktdaten anzeigen
  - notiz abfragen und speichern
  - optional als "telefonisch nicht erreicht, später versuchen" markieren
  - optional als "warte auf email-antwort" markieren
- Notiz hinzufügen
  - formular zeigen
- "nicht mehr anzeigen"
  - "warum" abfragen und speichern
  - "Wenn Du möchtest kannst Du den Grund für das Ausblenden hier eintragen. So erinnerst 
    Du dich später besser"
  
Startseite:
"was ist zu tun?"
  - was muss auf die todo-liste?
    - infos einholen
    - termin vereinbaren
    - nachhaken, wenn vermieter nicht auf eine email oder mailbox-notiz antwortet
    - nochmal versuchen, wenn ein vermieter telefonisch nicht erreichbar war
    - nach wohnungsbesichtigung notizen machen 
- Neu geholte
  - Karte und Infos ansehen
  - Vermieter kontaktieren
  - Notiz hinzufügen
  - "nicht mehr anzeigen"
- "nächste Besichtigungen"
  - 5 anzeigen, mindestens 1 Tag 
- Status:
  - neu
  - entscheiden, ob kontaktiere
  - will weitere infos
  - warte auf antwort
  - habe genug infos
  - entscheiden, ob ich sie mir ansehe
  - termin vereinbaren
  - termin vereinbart
  - wohnung besichtigt
  - entscheiden, ob ich sie will
  - wohnung uninteressant
  - wohnung interessant
  - wohnung nicht bekommen
  - wohnung bekommen

- (+) Workflow:
  Neu => Angesehen => Kontaktiert => Termin vereinbart => Besichtigt => Zusage bekommen
  
State machine
- states (one initial, several final)
- transitions: changes of state
- events: trigger transitions

2D Table:
X: current state
Y: input event
field value: next state (and action code)