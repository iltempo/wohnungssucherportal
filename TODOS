========== BACKLOG ==========

* stub HTTP requests (wg-gesucht, geocoding)


========== IDEEN ========== 

* stadtviertel auf google map einrahmen
* wg-gesucht such-url regelmaessig abfragen, neue scrapen; unregelmaessiges intervall

* mehrbenutzer-fähigkeit
  - user login
  - flat scope auf user-id
  - ? flat basisdaten nur 1x erfassen ?
  - fixpunkte scopen und selber verwalten
  
* mehrstädte-fähigkeit
  - städte aus dem HTML parsen und in DB speichern
  - hard-coding entfernen
  
  - letzte lat/long und zoomstufe speichern
  
- todo-liste auf der startseite
  - visit seit letztem mal abgelaufen: "wie war der besuch?"
  - vor besuch: telefonnummer eintragen

- email-korrespondenz bei der wohnungsseite
  - wie facebook

- timeline auf der wohnungsseite statt einem großen kommentar
  => "Was ist hier der Stand?"
  - hinzugefügt 
  - bearbeitet
  - status
  - termin vereinbart
  - mehrere kommentare

* minimale mobile verwendbarkeit
  
* get rid of sudo on deploy

* ruby 1.8.7 => 1.9.2
  - go to rvm and 1.9 in production

* auf haml/sass umstellen

* increase test coverage, including js

* consistency: all flats must have a visit date if they are in or after state "visit_scheduled"

* auf 1-page-app umbauen?
  organize JS code properly
  backbone.js
  
* map passt sich an die größe des browserfensters an

* personalisierung - scope auf user
  - benutzeranmeldung und login
  - mit jedem flat die user id speichern


  
========== LATER ========== 


* benutzung für beliebige städte ermöglichen
  - hartcodierte städte aus code nehmen

* eigene fixpunkte eingeben (z.b. arbeit, hauptbahnhof)

* viertel-grenzen einblenden

* Verkehrsanbindung
  * routing zu fix punkten mit km-anzeige und geschätzter fahrzeit (öffentlich, auto, rad, zu fuß)
    - als tabelle "Entfernungen" anzeigen
  * Entfernung zu Tram, Bus, U- und S-Bahn anzeigen)
  
* i18n auf deutsch
* offline-verwendbarkeit

* flats anhand der umkreise bewerten (Kevin)
* Vermieter/Mitbewohner anhand des namens/email im web googlen (Kevin)

* immoscout scraper fixen

========== DONE ==========

* scraper auf XPath umstellen
* prototype => jquery
* rspec 2, capybara, write some acceptance tests
* eigene fixpunkte auch auf detailkarte anzeigen
* rails 3
* fix database
* set encoding: utf8
* got to mysql2
* fix 10 marker limit in geocoder
  => store geolocation in db
* fix invalid html (body tag)
* cap web disable
* get rid of test directory; convert existing tests
* one rake task to test it all
* one cap task to run specs, push, and release